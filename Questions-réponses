1 - Quels sont les programmes qui peuvent servir de base au projet ?

* D8_peg et D9_2048 : pour le principe de séparation noyau/interface

* E8A_pillow, E8B_pillow et E8C_pillow : une série de trois exemples montrant
  quelques unes des fonctionnalités de manipulation d'images fournies par la
  bibliothèque Pillow. Le plus utile dans le cadre du projet est l'exemple
  'E8C_pillow' qui montre l'utilisation de la fonction 'floodfill' pour colorier
  le voisinage d'une zone de couleur unie à partir d'un pixel 'seed' donné

* B6A_blkfile : pour la lecture et l'analyse des fichiers d'encodage pour les
  différents plateaux fournis. La fonction 'read_blk' va permettre de lire tout
  le fichier en une seule opération, enlever les lignes de commentaire et créer
  une liste où chaque élément sera une chaîne de caractères identifiant les
  cases de la grille. Bref, exactement ce qu'il faut pour connaitre la valeur
  de score pour chaque case de la grille (cf. question 3)
-------------------------------------------------------------------------------
  
2 - Comment installer la bibliothèque 'pillow' ?

Normalement, si vous avez installé l'environnement Python en laissant les
paramètres de configuration standard, vous devez avoir le programme 'pip'
(acronyme pour 'Pip Installs Packages) accessible pour installer des
bibliothèques externes. Le processus est le même pour Windows, Linux et MacOS:

- Ouvrir une fenêtre 'Terminal' sur votre système ('cmd' sur Windows)
- Taper la commande suivante dans votre terminal:
  pip install pillow
- Normalement, le programme devrait se connecter automatiquement sur les
  serveurs de packages Python, récupérer et installer la bibliothèque
- Ensuite, les 3 exemples 'E8x_pillow' devraient s'exécuter sans erreur

Si vous avez un message d'erreur durant le processus, vous pouvez me faire un
mail, en me mettant une copie du message pour que je puisse identifier le pb
-------------------------------------------------------------------------------

3 - Peut-on jouer tout seul ? Comment se passe l'alternance des couleurs ?

Le jeu se joue impérativement à 2 joueurs, même si en pratique, pour éviter de
passer continuellement la souris d'un joueur à l'autre, on peut supposer que 
le joueur A est maître de la souris, et que le joueur B indique simplement au
joueur A quelle est la zone qu'il souhaite colorier

Pour l'alternance des couleurs, le cycle est toujours fixe (Joueur A couleur R,
Joueur B couleur G, Joueur A couleur B, Joueur B couleur Y). Chaque joueur doit
donc réfléchir à optimiser simultanément ses deux couleurs pour qu'à l'arrivée,
le produit de ses deux scores soit maximal
-------------------------------------------------------------------------------

4 - Comment se calculent les scores au cours du jeu ?

Le plus simple est de mettre les scores partiels correspondants à chacune des
4 couleurs dans une liste, en associant des indices numériques correspondants à
l'ordre des couleurs dans le cycle: R=0, G=1, B=2, Y=3. Pour chaque couleur, on
va stocker un couple [A,M] où A=somme des tags additifs (comptés en positif) et
des tags soustractifs (comptés en négatif) et M=somme des tags multiplicatifs.
La liste aura donc la forme suivante : [[AR,MR], [AG,MG], [AB,MB], [AY,MY]]

Avec ces notations, les scores respectifs des 2 joueurs sont définis par les
formules suivantes, qui devront être calculés et affichés à chaque tour de jeu:

Score du joueur A = AR*MR*AB*MB  [produit des scores rouge et bleu]
Score du joueur B = AG*MG*AY*MY  [produit des scores vert et jaune]
-------------------------------------------------------------------------------
  
5 - Comment connaître les points affectés à chaque zone du plateau de jeu ?

Les valeurs des zones sont fournies (indirectement) par le fichier d'encodage
associé à chaque plateau (le fichier qui porte le même nom mais avec l'extension
'.txt'). Chaque case du plateau porte une lettre (de A à X) correspondant aux
noms des 24 zones. Pour tous les plateaux de jeu, une même lettre correspond
toujours à la même valeur de points en additif, soustratif ou multiplicatif
(cf. commentaire en tête de chaque fichier d'encodage). La case centrale est
codée par la lettre Z et elle ne pourra pas être coloriée.

Dans ces conditions, un stockage particulièrement adapté consiste à utiliser un
dictionnaire associant le nom de la zone et la valeur de score. Pour simplifier
le calcul des scores, l'idéal est d'associer un couple (A,M) à chaque clé du
dictionnaire (cf. question 4). Voici quelques éléments de ce dictionnaire:

zones = {'A':(1,0), ..., 'I':(3,0), ..., 'N':(-2,0), ..., 'U':(0,2), ...}

autrement dit, la zone A va incrémenter de 1 le score additif et de 0 le score
multiplicatif, la zone N va incrémenter de -2 le score additif et de 0 le score
multiplicatif, la zone U va incrémenter de 0 le score additif et de 2 le score
multiplicatif, et idem pour les autres lettres
-------------------------------------------------------------------------------

6 - Comment identifier la zone cliquée par un joueur ?

L'exemple 'E8C_pillow' montre l'utilisation des méthodes 'winfo_pointer[x|y]'
et 'winfo_root[x|y]' pour calculer les coordonnées de la souris par rapport au
coin supérieur gauche d'une widget. Comme le plateau de jeu est basée sur des
cases carrées qui font 63x63 pixels (bordure comprise), il suffit de faire une
division entière par 63 à partir des coordonnées (x,y) de la souris pour obtenir
les indices de colonne et de ligne sur le plateau. Ensuite, il suffit de se
référer à la valeur correspondante fournies par le fichier d'encodage (cf.
question ci-dessus) pour connaître l'influence de cette zone sur le score

Comme dans l'exemple 'E8C_pillow', avant d'appliquer la fonction 'floodfill',
il faut commencer par vérifier que la couleur du pixel cliqué correspond à du
blanc (255,255,255). Comme ça, si le joueur clique sur la case centrale (grise)
ou sur une zone déjà colorée lors d'un tour précédent, la couleur ne sera pas
appliquée
-------------------------------------------------------------------------------
